// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: xref/xref.proto

package xref

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XrefServiceClient is the client API for XrefService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XrefServiceClient interface {
	GetXref(ctx context.Context, in *XrefRequest, opts ...grpc.CallOption) (*XrefResponse, error)
	GetMagicNumberSummary(ctx context.Context, in *Status, opts ...grpc.CallOption) (*MagicNumberSummary, error)
	AddXrefs(ctx context.Context, opts ...grpc.CallOption) (XrefService_AddXrefsClient, error)
	GetMagicNumbers(ctx context.Context, in *Status, opts ...grpc.CallOption) (XrefService_GetMagicNumbersClient, error)
	GetXrefs(ctx context.Context, opts ...grpc.CallOption) (XrefService_GetXrefsClient, error)
}

type xrefServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXrefServiceClient(cc grpc.ClientConnInterface) XrefServiceClient {
	return &xrefServiceClient{cc}
}

func (c *xrefServiceClient) GetXref(ctx context.Context, in *XrefRequest, opts ...grpc.CallOption) (*XrefResponse, error) {
	out := new(XrefResponse)
	err := c.cc.Invoke(ctx, "/xref.XrefService/GetXref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrefServiceClient) GetMagicNumberSummary(ctx context.Context, in *Status, opts ...grpc.CallOption) (*MagicNumberSummary, error) {
	out := new(MagicNumberSummary)
	err := c.cc.Invoke(ctx, "/xref.XrefService/GetMagicNumberSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrefServiceClient) AddXrefs(ctx context.Context, opts ...grpc.CallOption) (XrefService_AddXrefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &XrefService_ServiceDesc.Streams[0], "/xref.XrefService/AddXrefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &xrefServiceAddXrefsClient{stream}
	return x, nil
}

type XrefService_AddXrefsClient interface {
	Send(*XrefRequest) error
	CloseAndRecv() (*XrefSummary, error)
	grpc.ClientStream
}

type xrefServiceAddXrefsClient struct {
	grpc.ClientStream
}

func (x *xrefServiceAddXrefsClient) Send(m *XrefRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *xrefServiceAddXrefsClient) CloseAndRecv() (*XrefSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(XrefSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xrefServiceClient) GetMagicNumbers(ctx context.Context, in *Status, opts ...grpc.CallOption) (XrefService_GetMagicNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &XrefService_ServiceDesc.Streams[1], "/xref.XrefService/GetMagicNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &xrefServiceGetMagicNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type XrefService_GetMagicNumbersClient interface {
	Recv() (*MagicNumber, error)
	grpc.ClientStream
}

type xrefServiceGetMagicNumbersClient struct {
	grpc.ClientStream
}

func (x *xrefServiceGetMagicNumbersClient) Recv() (*MagicNumber, error) {
	m := new(MagicNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xrefServiceClient) GetXrefs(ctx context.Context, opts ...grpc.CallOption) (XrefService_GetXrefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &XrefService_ServiceDesc.Streams[2], "/xref.XrefService/GetXrefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &xrefServiceGetXrefsClient{stream}
	return x, nil
}

type XrefService_GetXrefsClient interface {
	Send(*XrefRequest) error
	Recv() (*XrefResponse, error)
	grpc.ClientStream
}

type xrefServiceGetXrefsClient struct {
	grpc.ClientStream
}

func (x *xrefServiceGetXrefsClient) Send(m *XrefRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *xrefServiceGetXrefsClient) Recv() (*XrefResponse, error) {
	m := new(XrefResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XrefServiceServer is the server API for XrefService service.
// All implementations must embed UnimplementedXrefServiceServer
// for forward compatibility
type XrefServiceServer interface {
	GetXref(context.Context, *XrefRequest) (*XrefResponse, error)
	GetMagicNumberSummary(context.Context, *Status) (*MagicNumberSummary, error)
	AddXrefs(XrefService_AddXrefsServer) error
	GetMagicNumbers(*Status, XrefService_GetMagicNumbersServer) error
	GetXrefs(XrefService_GetXrefsServer) error
	mustEmbedUnimplementedXrefServiceServer()
}

// UnimplementedXrefServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXrefServiceServer struct {
}

func (UnimplementedXrefServiceServer) GetXref(context.Context, *XrefRequest) (*XrefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXref not implemented")
}
func (UnimplementedXrefServiceServer) GetMagicNumberSummary(context.Context, *Status) (*MagicNumberSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMagicNumberSummary not implemented")
}
func (UnimplementedXrefServiceServer) AddXrefs(XrefService_AddXrefsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddXrefs not implemented")
}
func (UnimplementedXrefServiceServer) GetMagicNumbers(*Status, XrefService_GetMagicNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMagicNumbers not implemented")
}
func (UnimplementedXrefServiceServer) GetXrefs(XrefService_GetXrefsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetXrefs not implemented")
}
func (UnimplementedXrefServiceServer) mustEmbedUnimplementedXrefServiceServer() {}

// UnsafeXrefServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XrefServiceServer will
// result in compilation errors.
type UnsafeXrefServiceServer interface {
	mustEmbedUnimplementedXrefServiceServer()
}

func RegisterXrefServiceServer(s grpc.ServiceRegistrar, srv XrefServiceServer) {
	s.RegisterService(&XrefService_ServiceDesc, srv)
}

func _XrefService_GetXref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XrefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrefServiceServer).GetXref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xref.XrefService/GetXref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrefServiceServer).GetXref(ctx, req.(*XrefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrefService_GetMagicNumberSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrefServiceServer).GetMagicNumberSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xref.XrefService/GetMagicNumberSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrefServiceServer).GetMagicNumberSummary(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrefService_AddXrefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XrefServiceServer).AddXrefs(&xrefServiceAddXrefsServer{stream})
}

type XrefService_AddXrefsServer interface {
	SendAndClose(*XrefSummary) error
	Recv() (*XrefRequest, error)
	grpc.ServerStream
}

type xrefServiceAddXrefsServer struct {
	grpc.ServerStream
}

func (x *xrefServiceAddXrefsServer) SendAndClose(m *XrefSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *xrefServiceAddXrefsServer) Recv() (*XrefRequest, error) {
	m := new(XrefRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _XrefService_GetMagicNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Status)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XrefServiceServer).GetMagicNumbers(m, &xrefServiceGetMagicNumbersServer{stream})
}

type XrefService_GetMagicNumbersServer interface {
	Send(*MagicNumber) error
	grpc.ServerStream
}

type xrefServiceGetMagicNumbersServer struct {
	grpc.ServerStream
}

func (x *xrefServiceGetMagicNumbersServer) Send(m *MagicNumber) error {
	return x.ServerStream.SendMsg(m)
}

func _XrefService_GetXrefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XrefServiceServer).GetXrefs(&xrefServiceGetXrefsServer{stream})
}

type XrefService_GetXrefsServer interface {
	Send(*XrefResponse) error
	Recv() (*XrefRequest, error)
	grpc.ServerStream
}

type xrefServiceGetXrefsServer struct {
	grpc.ServerStream
}

func (x *xrefServiceGetXrefsServer) Send(m *XrefResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *xrefServiceGetXrefsServer) Recv() (*XrefRequest, error) {
	m := new(XrefRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XrefService_ServiceDesc is the grpc.ServiceDesc for XrefService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XrefService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xref.XrefService",
	HandlerType: (*XrefServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXref",
			Handler:    _XrefService_GetXref_Handler,
		},
		{
			MethodName: "GetMagicNumberSummary",
			Handler:    _XrefService_GetMagicNumberSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddXrefs",
			Handler:       _XrefService_AddXrefs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMagicNumbers",
			Handler:       _XrefService_GetMagicNumbers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetXrefs",
			Handler:       _XrefService_GetXrefs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xref/xref.proto",
}
