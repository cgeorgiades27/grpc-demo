// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/xref.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XrefServiceClient is the client API for XrefService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XrefServiceClient interface {
	GetXref(ctx context.Context, in *XrefRequest, opts ...grpc.CallOption) (*XrefResponse, error)
	RevertXref(ctx context.Context, in *XREF, opts ...grpc.CallOption) (*XREF, error)
}

type xrefServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXrefServiceClient(cc grpc.ClientConnInterface) XrefServiceClient {
	return &xrefServiceClient{cc}
}

func (c *xrefServiceClient) GetXref(ctx context.Context, in *XrefRequest, opts ...grpc.CallOption) (*XrefResponse, error) {
	out := new(XrefResponse)
	err := c.cc.Invoke(ctx, "/services.XrefService/GetXref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrefServiceClient) RevertXref(ctx context.Context, in *XREF, opts ...grpc.CallOption) (*XREF, error) {
	out := new(XREF)
	err := c.cc.Invoke(ctx, "/services.XrefService/RevertXref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XrefServiceServer is the server API for XrefService service.
// All implementations must embed UnimplementedXrefServiceServer
// for forward compatibility
type XrefServiceServer interface {
	GetXref(context.Context, *XrefRequest) (*XrefResponse, error)
	RevertXref(context.Context, *XREF) (*XREF, error)
	mustEmbedUnimplementedXrefServiceServer()
}

// UnimplementedXrefServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXrefServiceServer struct {
}

func (UnimplementedXrefServiceServer) GetXref(context.Context, *XrefRequest) (*XrefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXref not implemented")
}
func (UnimplementedXrefServiceServer) RevertXref(context.Context, *XREF) (*XREF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertXref not implemented")
}
func (UnimplementedXrefServiceServer) mustEmbedUnimplementedXrefServiceServer() {}

// UnsafeXrefServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XrefServiceServer will
// result in compilation errors.
type UnsafeXrefServiceServer interface {
	mustEmbedUnimplementedXrefServiceServer()
}

func RegisterXrefServiceServer(s grpc.ServiceRegistrar, srv XrefServiceServer) {
	s.RegisterService(&XrefService_ServiceDesc, srv)
}

func _XrefService_GetXref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XrefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrefServiceServer).GetXref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.XrefService/GetXref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrefServiceServer).GetXref(ctx, req.(*XrefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrefService_RevertXref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XREF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrefServiceServer).RevertXref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.XrefService/RevertXref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrefServiceServer).RevertXref(ctx, req.(*XREF))
	}
	return interceptor(ctx, in, info, handler)
}

// XrefService_ServiceDesc is the grpc.ServiceDesc for XrefService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XrefService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.XrefService",
	HandlerType: (*XrefServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXref",
			Handler:    _XrefService_GetXref_Handler,
		},
		{
			MethodName: "RevertXref",
			Handler:    _XrefService_RevertXref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/xref.proto",
}
